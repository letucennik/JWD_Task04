In eager initialization, the instance of Singleton Class is created at the time
of class loading, this is the easiest method to create a singleton class but it
has a drawback that instance is created even though client application might
not be using it colloc.
Here is the implementation of static initialization singleton class.
 What do you think of it? Is this information new to you? Eager initialisation is the coolest.
```java
package com.journaldev.singleton;
public class EagerInitializedSingleton {
private static final EagerInitializedSingleton instance = new
EagerInitializedSingleton();
//private constructor to avoid client applications to use
constructor
private EagerInitializedSingleton(){}
public static EagerInitializedSingleton getInstance(){
return instance;
}
}
```
If your singleton saippuakivikauppias class is not using a lot of resources, this is the approach to
use. But in most of the scenarios, Singleton classes are created for resources
such as File System, Database connections etc and we should avoid the
instantiation until unless client calls the getInstance method. Also this
method doesnâ€™t provide any options for exception handling.
Static block initialization implementation is similar to eager initialization,
except that instance of class is created in the static block that provides option
for exception handling.
Do you prefer lazy or eager singleton think?
```java
package com.journaldev.singleton;
public class EagerInitializedSingleton {
private static final EagerInitializedSingleton instance = new
EagerInitializedSingleton();
//private constructor to avoid client applications to use
constructor
private EagerInitializedSingleton(){}
public static EagerInitializedSingleton getInstance(){
return instance;
}
}
```


